The 0-add_integer test file by:
    ABDULSALAM ABDULSOMAD .A., January 3rd, 2023.
-----------------------------------------------------------------

How to use ``0-add_integer.py``
===============================

    The 0-add_integer.py module contains the definition of a function ``add()`` that returns the sum of two integers.

Importing the module:
=======================
    >>> add_integer = __import__('0-add_integer').add_integer

Applying test cases:
====================
::
	Two positive integers ==>
        >>> add_integer(5,6)
        11

::
   	A positive and a negative integer ==>
		>>> add_integer(4,-1)
		3

::
	Two floats ==>
		>>> add_integer(5.0,5.0)
		10

::
	A float and an int ==>
		>>> add_integer(5.0, 2)
		7

::
	It is very important to note that floats get truncated during the addition.
		>>> add_integer(5.9, 2)
		7

::
	Two negative floats ==>
		>>> add_integer(-5.9, -2)
		-7

::
	It is also important to note that the second argument is optional and 98 by default.
		>>> add_integer(0)
		98

Non-number arguments:
=====================
::
	No argument ==>
		>>> add_integer()
		Traceback (most recent call last):
		TypeError: add_integer() missing 1 required positional argument: 'a'

::
	passing None ==>
		>>> add_integer(None)
		Traceback (most recent call last):
		TypeError: a must be an integer

::
	String and int ==>
		>>> add_integer(3.0, 'hi')
		Traceback (most recent call last):
		TypeError: b must be an integer

		>>> add_integer('hi', 6)
		Traceback (most recent call last):
		TypeError: a must be an integer

::
	None and float ==>
		>>> add_integer(3.0, None)
		Traceback (most recent call last):
		TypeError: b must be an integer

::
	Two strings ==>
		>>> add_integer('funny', 'clown')
		Traceback (most recent call last):
		TypeError: a must be an integer

Passing infinity and NaN numbers:
=================================
::
	Int and infinity ==>
		>>> add_integer(3, float('inf'))
		Traceback (most recent call last):
		OverflowError: cannot convert float infinity to integer

::
	Int and NaN ==>
		>>> add_integer(float('nan'))
		Traceback (most recent call last):
		ValueError: cannot convert float NaN to integer	
