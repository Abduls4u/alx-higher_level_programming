The 7-base_geometry test file by:
    ABDULSALAM ABDULSOMAD .A., January 22nd, 2023.
----------------------------------------------------------------

Importing the module:
=====================
		>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Applying test cases:
====================

Testing if module(7-base_geometry.py) is documented:
         >>> module_doc = __import__("7-base_geometry").__doc__
         >>> len(module_doc) > 1
         True

Testing if class(BaseGeometry) is documented:
         >>> class_doc = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(class_doc) > 1
         True

Testing if method(integer_validator) is documented:
	  >>> method_doc = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	  >>> len(method_doc) > 1
	  True

Testing area:
	  >>> b = BaseGeometry()
	  >>> b.area()
	  Traceback (most recent call last):
	  ...
	  Exception: area() is not implemented

Testing area with many arguments:
	  >>> b.area(1)
	  Traceback (most recent call last):
          ...
	  TypeError: area() takes 1 positional argument but 2 were given

Testing integer validator with an integer:
	  >>> b.integer_validator("integer", 1)

Testing with 0:
	  >>> b.integer_validator("integer", 0)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Testing with an integer lesser than 0;
	  >>> b.integer_validator("integer", -5)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Testing with non-integer types; 

	  >>> b.integer_validator("float", 1.5)
          Traceback (most recent call last):
          ...
          TypeError: float must be an integer
	  
	  >>> b.integer_validator("complex", complex(1, 1))
          Traceback (most recent call last):
          ...
          TypeError: complex must be an integer
	  
	  >>> b.integer_validator("string", "hello")
          Traceback (most recent call last):
          ...
          TypeError: string must be an integer
	  
	  >>> b.integer_validator("tuple", (1, 2))
          Traceback (most recent call last):
          ...
          TypeError: tuple must be an integer
	  
	  >>> b.integer_validator("list", [1, 2, 3])
	  Traceback (most recent call last):
          ...
          TypeError: list must be an integer
	  
	  >>> b.integer_validator("dict", {"key": "value"})
          Traceback (most recent call last):
          ...
          TypeError: dict must be an integer
	  
	  >>> b.integer_validator("set", {"hello", "world"})
          Traceback (most recent call last):
          ...
          TypeError: set must be an integer

Testing integer_validator with no argument:
	  >>> b.integer_validator()
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
